/*
 * MoviesAndSeries.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Series
    /// </summary>
    [DataContract(Name = "Series")]
    public partial class Series : IEquatable<Series>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Series" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="kinopoiskRating">kinopoiskRating.</param>
        /// <param name="imdbRating">imdbRating.</param>
        /// <param name="episodes">episodes.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="poster">poster.</param>
        public Series(int? id = default(int?), string name = default(string), string kinopoiskRating = default(string), string imdbRating = default(string), List<Episode> episodes = default(List<Episode>), string startDate = default(string), string endDate = default(string), string poster = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.KinopoiskRating = kinopoiskRating;
            this.ImdbRating = imdbRating;
            this.Episodes = episodes;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Poster = poster;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets KinopoiskRating
        /// </summary>
        [DataMember(Name = "kinopoiskRating", EmitDefaultValue = true)]
        public string KinopoiskRating { get; set; }

        /// <summary>
        /// Gets or Sets ImdbRating
        /// </summary>
        [DataMember(Name = "imdbRating", EmitDefaultValue = true)]
        public string ImdbRating { get; set; }

        /// <summary>
        /// Gets or Sets Episodes
        /// </summary>
        [DataMember(Name = "episodes", EmitDefaultValue = true)]
        public List<Episode> Episodes { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Poster
        /// </summary>
        [DataMember(Name = "poster", EmitDefaultValue = true)]
        public string Poster { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Series {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  KinopoiskRating: ").Append(KinopoiskRating).Append("\n");
            sb.Append("  ImdbRating: ").Append(ImdbRating).Append("\n");
            sb.Append("  Episodes: ").Append(Episodes).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Poster: ").Append(Poster).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Series);
        }

        /// <summary>
        /// Returns true if Series instances are equal
        /// </summary>
        /// <param name="input">Instance of Series to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Series input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.KinopoiskRating == input.KinopoiskRating ||
                    (this.KinopoiskRating != null &&
                    this.KinopoiskRating.Equals(input.KinopoiskRating))
                ) && 
                (
                    this.ImdbRating == input.ImdbRating ||
                    (this.ImdbRating != null &&
                    this.ImdbRating.Equals(input.ImdbRating))
                ) && 
                (
                    this.Episodes == input.Episodes ||
                    this.Episodes != null &&
                    input.Episodes != null &&
                    this.Episodes.SequenceEqual(input.Episodes)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Poster == input.Poster ||
                    (this.Poster != null &&
                    this.Poster.Equals(input.Poster))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.KinopoiskRating != null)
                {
                    hashCode = (hashCode * 59) + this.KinopoiskRating.GetHashCode();
                }
                if (this.ImdbRating != null)
                {
                    hashCode = (hashCode * 59) + this.ImdbRating.GetHashCode();
                }
                if (this.Episodes != null)
                {
                    hashCode = (hashCode * 59) + this.Episodes.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Poster != null)
                {
                    hashCode = (hashCode * 59) + this.Poster.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
